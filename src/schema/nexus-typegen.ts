/**
 * This file was generated by Nexus Schema
 * Do not make changes to this file directly
 */


import type { Context } from "./../context"




declare global {
  interface NexusGen extends NexusGenTypes {}
}

export interface NexusGenInputs {
}

export interface NexusGenEnums {
  GroupState: "FINAL_RESULTS" | "IN_PROGRESS" | "SHOWING_RESULTS" | "WAITING_FOR_PLAYERS"
  QuestionType: "AGREE" | "DISAGREE"
}

export interface NexusGenScalars {
  String: string
  Int: number
  Float: number
  Boolean: boolean
  ID: string
  Void: any
}

export interface NexusGenObjects {
  Answer: { // root type
    index?: number | null; // Int
    scoreDelta?: number | null; // Int
    text: string; // String!
    users?: Array<NexusGenRootTypes['User'] | null> | null; // [User]
  }
  AuthInfo: { // root type
    token: string; // String!
    user: NexusGenRootTypes['User']; // User!
  }
  Group: { // root type
    id: string; // ID!
    question?: NexusGenRootTypes['Question'] | null; // Question
    state: NexusGenEnums['GroupState']; // GroupState!
    users: NexusGenRootTypes['User'][]; // [User!]!
  }
  Mutation: {};
  Query: {};
  Question: { // root type
    answers: NexusGenRootTypes['Answer'][]; // [Answer!]!
    end: string; // String!
    groupId: string; // ID!
    id: string; // ID!
    round: number; // Int!
    type: NexusGenEnums['QuestionType']; // QuestionType!
  }
  Subscription: {};
  User: { // root type
    groupId?: string | null; // ID
    id: string; // ID!
    name: string; // String!
    score?: number | null; // Int
  }
}

export interface NexusGenInterfaces {
}

export interface NexusGenUnions {
}

export type NexusGenRootTypes = NexusGenObjects

export type NexusGenAllTypes = NexusGenRootTypes & NexusGenScalars & NexusGenEnums

export interface NexusGenFieldTypes {
  Answer: { // field return type
    index: number | null; // Int
    scoreDelta: number | null; // Int
    text: string; // String!
    users: Array<NexusGenRootTypes['User'] | null> | null; // [User]
  }
  AuthInfo: { // field return type
    token: string; // String!
    user: NexusGenRootTypes['User']; // User!
  }
  Group: { // field return type
    id: string; // ID!
    question: NexusGenRootTypes['Question'] | null; // Question
    state: NexusGenEnums['GroupState']; // GroupState!
    users: NexusGenRootTypes['User'][]; // [User!]!
  }
  Mutation: { // field return type
    createGroup: NexusGenRootTypes['Group'] | null; // Group
    createUser: NexusGenRootTypes['AuthInfo']; // AuthInfo!
    joinGroup: NexusGenRootTypes['Group'] | null; // Group
    leaveGroup: NexusGenScalars['Void'] | null; // Void
    logout: NexusGenScalars['Void'] | null; // Void
    markUserReady: NexusGenScalars['Void'] | null; // Void
    submitAnswer: NexusGenScalars['Void'] | null; // Void
  }
  Query: { // field return type
    groupById: NexusGenRootTypes['Group'] | null; // Group
  }
  Question: { // field return type
    answers: NexusGenRootTypes['Answer'][]; // [Answer!]!
    end: string; // String!
    groupId: string; // ID!
    id: string; // ID!
    round: number; // Int!
    type: NexusGenEnums['QuestionType']; // QuestionType!
  }
  Subscription: { // field return type
    groupUpdated: NexusGenRootTypes['Group'] | null; // Group
  }
  User: { // field return type
    groupId: string | null; // ID
    id: string; // ID!
    name: string; // String!
    score: number | null; // Int
  }
}

export interface NexusGenFieldTypeNames {
  Answer: { // field return type name
    index: 'Int'
    scoreDelta: 'Int'
    text: 'String'
    users: 'User'
  }
  AuthInfo: { // field return type name
    token: 'String'
    user: 'User'
  }
  Group: { // field return type name
    id: 'ID'
    question: 'Question'
    state: 'GroupState'
    users: 'User'
  }
  Mutation: { // field return type name
    createGroup: 'Group'
    createUser: 'AuthInfo'
    joinGroup: 'Group'
    leaveGroup: 'Void'
    logout: 'Void'
    markUserReady: 'Void'
    submitAnswer: 'Void'
  }
  Query: { // field return type name
    groupById: 'Group'
  }
  Question: { // field return type name
    answers: 'Answer'
    end: 'String'
    groupId: 'ID'
    id: 'ID'
    round: 'Int'
    type: 'QuestionType'
  }
  Subscription: { // field return type name
    groupUpdated: 'Group'
  }
  User: { // field return type name
    groupId: 'ID'
    id: 'ID'
    name: 'String'
    score: 'Int'
  }
}

export interface NexusGenArgTypes {
  Mutation: {
    createUser: { // args
      name: string; // String!
    }
    joinGroup: { // args
      groupId: string; // ID!
    }
    markUserReady: { // args
      ready: boolean; // Boolean!
    }
    submitAnswer: { // args
      answerIndex: number; // Int!
    }
  }
  Query: {
    groupById: { // args
      id: string; // String!
    }
  }
}

export interface NexusGenAbstractTypeMembers {
}

export interface NexusGenTypeInterfaces {
}

export type NexusGenObjectNames = keyof NexusGenObjects;

export type NexusGenInputNames = never;

export type NexusGenEnumNames = keyof NexusGenEnums;

export type NexusGenInterfaceNames = never;

export type NexusGenScalarNames = keyof NexusGenScalars;

export type NexusGenUnionNames = never;

export type NexusGenObjectsUsingAbstractStrategyIsTypeOf = never;

export type NexusGenAbstractsUsingStrategyResolveType = never;

export type NexusGenFeaturesConfig = {
  abstractTypeStrategies: {
    isTypeOf: false
    resolveType: true
    __typename: false
  }
}

export interface NexusGenTypes {
  context: Context;
  inputTypes: NexusGenInputs;
  rootTypes: NexusGenRootTypes;
  inputTypeShapes: NexusGenInputs & NexusGenEnums & NexusGenScalars;
  argTypes: NexusGenArgTypes;
  fieldTypes: NexusGenFieldTypes;
  fieldTypeNames: NexusGenFieldTypeNames;
  allTypes: NexusGenAllTypes;
  typeInterfaces: NexusGenTypeInterfaces;
  objectNames: NexusGenObjectNames;
  inputNames: NexusGenInputNames;
  enumNames: NexusGenEnumNames;
  interfaceNames: NexusGenInterfaceNames;
  scalarNames: NexusGenScalarNames;
  unionNames: NexusGenUnionNames;
  allInputTypes: NexusGenTypes['inputNames'] | NexusGenTypes['enumNames'] | NexusGenTypes['scalarNames'];
  allOutputTypes: NexusGenTypes['objectNames'] | NexusGenTypes['enumNames'] | NexusGenTypes['unionNames'] | NexusGenTypes['interfaceNames'] | NexusGenTypes['scalarNames'];
  allNamedTypes: NexusGenTypes['allInputTypes'] | NexusGenTypes['allOutputTypes']
  abstractTypes: NexusGenTypes['interfaceNames'] | NexusGenTypes['unionNames'];
  abstractTypeMembers: NexusGenAbstractTypeMembers;
  objectsUsingAbstractStrategyIsTypeOf: NexusGenObjectsUsingAbstractStrategyIsTypeOf;
  abstractsUsingStrategyResolveType: NexusGenAbstractsUsingStrategyResolveType;
  features: NexusGenFeaturesConfig;
}


declare global {
  interface NexusGenPluginTypeConfig<TypeName extends string> {
  }
  interface NexusGenPluginInputTypeConfig<TypeName extends string> {
  }
  interface NexusGenPluginFieldConfig<TypeName extends string, FieldName extends string> {
  }
  interface NexusGenPluginInputFieldConfig<TypeName extends string, FieldName extends string> {
  }
  interface NexusGenPluginSchemaConfig {
  }
  interface NexusGenPluginArgConfig {
  }
}